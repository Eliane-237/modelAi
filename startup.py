#!/usr/bin/env python3
"""
Script de d√©marrage pour l'API du syst√®me RAG juridique camerounais.
Ce script initialise l'environnement et d√©marre l'API.
"""

import os
import sys
import logging
import subprocess
import argparse
from fastapi import FastAPI

# Configuration du logger
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

app = FastAPI()

def parse_args():
    """Parse les arguments de ligne de commande."""
    parser = argparse.ArgumentParser(description="D√©marrage de l'API RAG Juridique")
    
    parser.add_argument(
        "--host", 
        type=str, 
        default="0.0.0.0", 
        help="Adresse d'h√¥te pour l'API"
    )
    parser.add_argument(
        "--port", 
        type=int, 
        default=8000, 
        help="Port pour l'API"
    )
    parser.add_argument(
        "--reload", 
        action="store_true", 
        help="Activer le rechargement automatique"
    )
    parser.add_argument(
        "--debug", 
        action="store_true", 
        help="Activer le mode debug"
    )
    
    return parser.parse_args()

def check_environment():
    """V√©rifie que l'environnement est correctement configur√©."""
    # V√©rifier les r√©pertoires de donn√©es
    data_dirs = [
        "/home/mea/Documents/modelAi/data",
        "/home/mea/Documents/modelAi/metadata",
        "/home/mea/Documents/modelAi/metadata/chunks"
    ]
    
    for directory in data_dirs:
        if not os.path.exists(directory):
            logger.info(f"Cr√©ation du r√©pertoire {directory}")
            os.makedirs(directory, exist_ok=True)
   
    ''' # V√©rifier la connexion SSH
    try:
        # Test simple de connexion SSH (remplacer par un test plus robuste si n√©cessaire)
        result = subprocess.run(
            ["ssh", "-q", "-o", "BatchMode=yes", "imacpro@10.100.212.118", "echo OK"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=5
        )
        
        if result.returncode != 0 or "OK" not in result.stdout:
            logger.warning("‚ö†Ô∏è La connexion SSH √† imacpro@10.100.212.118 semble ne pas fonctionner correctement.")
            logger.warning("V√©rifiez que la cl√© SSH est configur√©e et que le serveur est accessible.")
        else:
            logger.info("‚úÖ Connexion SSH √† imacpro@10.100.212.118 OK")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur lors du test de connexion SSH: {e}") '''

def main():
    """Fonction principale pour d√©marrer l'API."""
    args = parse_args()
    logger.info("üöÄ D√©marrage du syst√®me RAG juridique camerounais")
    
    # IMPORTANT: D√©finir les variables d'environnement avant de d√©marrer l'API
    os.environ["MILVUS_HOST"] = "10.100.212.133"
    os.environ["MILVUS_PORT"] = "19530"
    logger.info(f"Variables d'environnement Milvus d√©finies: host={os.environ['MILVUS_HOST']}, port={os.environ['MILVUS_PORT']}")
    
    # V√©rifier l'environnement
    check_environment()
    
    # Pr√©parer la commande uvicorn
    cmd = [
        "uvicorn",
        "app.main:app",
        "--host", args.host,
        "--port", str(args.port)
    ]
    
    if args.reload:
        cmd.append("--reload")
    
    if args.debug:
        cmd.append("--log-level=debug")
    else:
        cmd.append("--log-level=info")
    
    # D√©marrer l'API
    logger.info(f"üåê D√©marrage de l'API sur {args.host}:{args.port}")
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        logger.info("üëã Arr√™t de l'API")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage de l'API: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()