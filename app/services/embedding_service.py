import requests
import logging
import time
import hashlib
from typing import List, Optional, Dict, Any
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from fastapi import FastAPI


# Configuration du logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

app = FastAPI()

class EmbeddingService:
    def __init__(
            
            self, 
            server_url="http://10.100.212.118:8000", 
            max_retries=3, 
            timeout=60
    ):
        """
        Initialise la connexion avec l'API d'embeddings sur le serveur distant.
        
        Args:
            server_url: URL du serveur d'embedding
            max_retries: Nombre maximal de tentatives de connexion
            timeout: D√©lai d'attente en secondes avant √©chec de la connexion
        """
        self.server_url = server_url
        self.max_retries = max_retries
        self.timeout = timeout
        self.session = self._create_retry_session()

       
        # Tester la connexion √† l'initialisation
        self._test_connection()
    
    def _create_retry_session(self):
        """
        Cr√©e une session HTTP avec gestion automatique des nouvelles tentatives.
        """
        session = requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=0.5,
            status_forcelist=[500, 502, 503, 504],
            allowed_methods=["POST", "GET"]
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session
    
    def _test_connection(self):
        """
        Teste la connexion au serveur d'embedding.
        """
        try:
            # Envoyer une requ√™te de test minimale
            test_text = ["Test de connexion"]
            logger.info(f"üîÑ Test de connexion au serveur d'embedding √† {self.server_url}")
            
            response = self.session.post(
                f"{self.server_url}/generate_embeddings/",
                json={"texts": test_text},
                timeout=self.timeout
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Connexion au serveur d'embedding r√©ussie")
            else:
                logger.warning(f"‚ö†Ô∏è Connexion au serveur d'embedding √©tablie mais avec code d'√©tat {response.status_code}")
                
        except requests.exceptions.ConnectTimeout:
            logger.warning(f"‚ö†Ô∏è D√©lai de connexion expir√© lors du test de connexion √† {self.server_url}")
        except requests.exceptions.ConnectionError:
            logger.warning(f"‚ö†Ô∏è Impossible d'√©tablir une connexion avec {self.server_url}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du test de connexion: {e}")

       
    def generate_embeddings(self, texts: List[str]) -> List[List[float]]:
        """
        Envoie les textes √† l'API distante pour obtenir les embeddings.
        
        Args:
            texts: Liste de textes √† convertir en embeddings
            
        Returns:
            Liste de vecteurs d'embedding
            
        Raises:
            ValueError: Si la liste de textes est vide
            RuntimeError: Si la connexion ou la r√©ponse API √©choue
        """
        if not texts:
            raise ValueError("‚ö†Ô∏è La liste de textes ne peut pas √™tre vide.")

        start_time = time.time()
        
        try:
            logger.info(f"üì° Envoi de {len(texts)} textes pour embeddings √† {self.server_url}")
            
            response = self.session.post(
                f"{self.server_url}/generate_embeddings/",
                json={"texts": texts},
                timeout=self.timeout
            )
            
            # V√©rifier la r√©ponse HTTP
            if response.status_code != 200:
                logger.error(f"üö® Erreur API {response.status_code}: {response.text}")
                raise RuntimeError(f"L'API a retourn√© une erreur {response.status_code}: {response.text}")
            
            # Extraire les embeddings de la r√©ponse
            result = response.json()
            embeddings = result.get("embeddings", [])
            
            if not embeddings:
                logger.error("üö® R√©ponse vide de l'API d'embeddings.")
                raise RuntimeError("üö® R√©ponse vide de l'API.")
            
            # V√©rification de la coh√©rence des dimensions des embeddings
            if any(len(embed) != len(embeddings[0]) for embed in embeddings):
                logger.error("üö® Incoh√©rence des dimensions des embeddings re√ßus.")
                raise ValueError("Tous les embeddings doivent avoir la m√™me dimension.")
            
            # Calculer le temps de traitement
            processing_time = time.time() - start_time
            
            logger.info(f"‚úÖ {len(embeddings)} embeddings re√ßus avec succ√®s en {processing_time:.2f}s.")
            logger.info(f"üìä Dimension des embeddings: {len(embeddings[0])}")
            
            return embeddings
            
        except requests.exceptions.ConnectTimeout:
            logger.error(f"üïí D√©lai de connexion expir√© pour {self.server_url}")
            raise RuntimeError(f"Impossible de se connecter au serveur d'embeddings (timeout): {self.server_url}")
        
        except requests.exceptions.ConnectionError:
            logger.error(f"üîå Erreur de connexion pour {self.server_url}")
            raise RuntimeError(f"Le serveur d'embeddings est inaccessible: {self.server_url}")
        
        except requests.exceptions.RequestException as e:
            logger.error(f"üö® Erreur de connexion √† l'API d'embeddings : {e}")
            raise RuntimeError(f"Impossible de contacter l'API: {e}")
        
        except Exception as e:
            logger.error(f"üö® Erreur inattendue: {e}")
            raise RuntimeError(f"Erreur lors de la g√©n√©ration des embeddings: {e}")

    def generate_embeddings_batch(self, texts: List[str], batch_size=32) -> List[List[float]]:
        """G√©n√®re des embeddings avec une approche par lots pour de meilleures performances."""
        if not texts:
            return []
        
        all_embeddings = []
        for i in range(0, len(texts), batch_size):
            batch = texts[i:i+batch_size]
            try:
                # Utiliser des requ√™tes partielles pour √©viter les timeout
                batch_embeddings = self._generate_embeddings_request(batch)
                all_embeddings.extend(batch_embeddings)
            except Exception as e:
                logger.error(f"Erreur lors de la g√©n√©ration d'embeddings pour le lot {i//batch_size}: {e}")
                # Si l'erreur est due √† la taille, r√©essayer avec des lots plus petits
                if batch_size > 4 and "size" in str(e).lower():
                    smaller_batch_size = batch_size // 2
                    sub_embeddings = self.generate_embeddings_batch(batch, smaller_batch_size)
                    all_embeddings.extend(sub_embeddings)
                else:
                    # Fallback: g√©n√©rer un par un en cas d'erreur
                    for text in batch:
                        try:
                            emb = self._generate_embeddings_request([text])
                            all_embeddings.extend(emb)
                        except:
                            # Ajouter un embedding z√©ro en cas d'√©chec total
                            all_embeddings.append([0.0] * self.embedding_dim)
        
        return all_embeddings

    
        
       
# Test rapide
if __name__ == "__main__":
    embedding_service = EmbeddingService()

    example_chunks = [
        "L'intelligence artificielle transforme le monde.",
        "Les mod√®les de langage comme GPT sont puissants."
    ]

    try:
        embeddings = embedding_service.generate_embeddings(example_chunks)
        print(f"‚úÖ Nombre d'embeddings g√©n√©r√©s: {len(embeddings)}")
        print(f"üîç Premier embedding (dimensions: {len(embeddings[0])}):\n{embeddings[0][:5]}... (tronqu√©)")
    except ValueError as e:
        print(f"‚ùå Erreur de validation: {e}")
    except RuntimeError as e:
        print(f"‚ùå Erreur de connexion: {e}")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")